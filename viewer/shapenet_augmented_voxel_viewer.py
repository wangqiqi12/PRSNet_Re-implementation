# NOTE: Generated by Claude Sonnet 4

"""
ShapeNet 体素3D模型可视化工具（带数据增强）

这个脚本提供了一个Gradio界面来浏览和可视化ShapeNetCore飞机模型的体素数据。
支持交互式3D查看，包括旋转、缩放、平移等操作，并集成了数据增强功能。

功能特点：
- 读取.binvox文件（solid和surface两种类型）
- 支持数据增强（平移、旋转、翻转等）
- 3D体素可视化
- 交互式控制
- 原始与增强数据对比
"""

import os
import sys
import json
import random
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
import plotly.subplots as sp
import gradio as gr
from pathlib import Path
from scipy import ndimage
import binvox_rw

# 添加项目根目录到路径
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from datasets.data_loader import ShapeNetVoxelDataset


class ShapeNetAugmentedVoxelViewer:
    def __init__(self, dataset_path):
        self.dataset_path = Path(dataset_path)
        
        # 创建原始数据集（不增强）
        self.original_dataset = ShapeNetVoxelDataset(
            dataset_path=str(dataset_path),
            voxel_type='surface',
            target_size=32,
            center_voxels=True,
            augment=False
        )
        
        # 创建增强数据集
        self.augmented_dataset = ShapeNetVoxelDataset(
            dataset_path=str(dataset_path),
            voxel_type='surface',
            target_size=32,
            center_voxels=True,
            augment=True
        )
        
        print(f"找到 {len(self.original_dataset)} 个3D体素模型")
        print("数据集支持增强功能")
    
    def get_model_count(self):
        """获取模型数量"""
        return len(self.original_dataset)
    
    def get_model_info(self, idx):
        """获取模型信息"""
        if idx >= len(self.original_dataset):
            return None
        
        # 获取模型路径和ID
        model_path = self.original_dataset.model_paths[idx]
        model_id = model_path.name
        return model_id
    
    def load_voxel_data(self, idx, use_augmentation=False, voxel_type='surface'):
        """
        加载体素数据
        
        Args:
            idx: 模型索引
            use_augmentation: 是否使用数据增强
            voxel_type: 体素类型
        
        Returns:
            voxel_data: numpy数组 [32, 32, 32]
            distance_field: 距离场 [32, 32, 32]
            model_id: 模型ID
        """
        if idx >= len(self.original_dataset):
            return None, None, None
        
        # 根据需要选择数据集和体素类型
        if use_augmentation:
            # 更新数据集的体素类型
            self.augmented_dataset.voxel_type = voxel_type
            voxel_tensor, distance_tensor, model_id = self.augmented_dataset[idx]
        else:
            # 更新数据集的体素类型
            self.original_dataset.voxel_type = voxel_type
            voxel_tensor, distance_tensor, model_id = self.original_dataset[idx]
        
        # 转换为numpy数组
        voxel_data = voxel_tensor[0].numpy()  # 去掉channel维度
        distance_field = distance_tensor.numpy()
        
        return voxel_data, distance_field, model_id
    
    def create_voxel_plot(self, model_idx, voxel_type='surface', use_augmentation=False, 
                         opacity=0.8, colorscale='Viridis', show_comparison=False):
        """创建3D体素可视化图"""
        
        # 加载原始数据
        original_voxels, _, model_id = self.load_voxel_data(model_idx, False, voxel_type)
        
        if original_voxels is None:
            fig = go.Figure()
            fig.add_annotation(text="无法加载体素模型", x=0.5, y=0.5, showarrow=False)
            return fig, "体素模型加载失败"
        
        # 如果需要显示对比，也加载增强数据
        if show_comparison and use_augmentation:
            augmented_voxels, _, _ = self.load_voxel_data(model_idx, True, voxel_type)
            
            # 创建并排对比图
            fig = sp.make_subplots(
                rows=1, cols=2,
                specs=[[{"type": "scatter3d"}, {"type": "scatter3d"}]],
                subplot_titles=["原始数据", "增强数据"],
                horizontal_spacing=0.1
            )
            
            # 添加原始数据
            original_coords = np.array(np.where(original_voxels > 0.5)).T
            if len(original_coords) > 0:
                original_trace = go.Scatter3d(
                    x=original_coords[:, 0],
                    y=original_coords[:, 1], 
                    z=original_coords[:, 2],
                    mode='markers',
                    marker=dict(
                        size=6,
                        color=original_coords[:, 2],
                        colorscale=colorscale,
                        opacity=opacity,
                        showscale=False
                    ),
                    name='原始',
                    showlegend=False
                )
                fig.add_trace(original_trace, row=1, col=1)
            
            # 添加增强数据
            if augmented_voxels is not None:
                augmented_coords = np.array(np.where(augmented_voxels > 0.5)).T
                if len(augmented_coords) > 0:
                    augmented_trace = go.Scatter3d(
                        x=augmented_coords[:, 0],
                        y=augmented_coords[:, 1],
                        z=augmented_coords[:, 2],
                        mode='markers',
                        marker=dict(
                            size=6,
                            color=augmented_coords[:, 2],
                            colorscale=colorscale,
                            opacity=opacity,
                            showscale=False
                        ),
                        name='增强',
                        showlegend=False
                    )
                    fig.add_trace(augmented_trace, row=1, col=2)
            
            # 设置3D场景属性
            scene_dict = dict(
                xaxis_title="X轴",
                yaxis_title="Y轴", 
                zaxis_title="Z轴",
                camera=dict(eye=dict(x=1.5, y=1.5, z=1.5)),
                aspectmode='cube',
                xaxis=dict(range=[0, 32]),
                yaxis=dict(range=[0, 32]),
                zaxis=dict(range=[0, 32])
            )
            
            fig.update_scenes(scene_dict, row=1, col=1)
            fig.update_scenes(scene_dict, row=1, col=2)
            
            fig.update_layout(
                title=f'体素模型对比: {model_id} ({voxel_type})',
                height=600,
                margin=dict(l=0, r=0, t=60, b=0)
            )
            
            # 创建对比信息
            original_count = np.sum(original_voxels > 0.5)
            augmented_count = np.sum(augmented_voxels > 0.5) if augmented_voxels is not None else 0
            
            info_text = f"**模型ID:** {model_id}\n"
            info_text += f"**体素类型:** {voxel_type.title()}\n"
            info_text += f"**分辨率:** 32×32×32\n"
            info_text += f"**原始体素数:** {original_count}\n"
            info_text += f"**增强体素数:** {augmented_count}\n"
            if original_count > 0:
                retention_rate = augmented_count / original_count * 100
                info_text += f"**体素保留率:** {retention_rate:.1f}%\n"
            info_text += f"**数据增强:** {'启用' if use_augmentation else '关闭'}"
            
        else:
            # 单个图显示
            if use_augmentation:
                voxel_data, _, _ = self.load_voxel_data(model_idx, True, voxel_type)
                title_suffix = " (增强)"
            else:
                voxel_data = original_voxels
                title_suffix = " (原始)"
            
            if voxel_data is None:
                voxel_data = original_voxels
            
            # 获取占用体素的坐标
            occupied_coords = np.where(voxel_data > 0.5)
            
            if len(occupied_coords[0]) == 0:
                fig = go.Figure()
                fig.add_annotation(text="没有占用的体素", x=0.5, y=0.5, showarrow=False)
                return fig, "没有占用的体素"
            
            x, y, z = occupied_coords
            
            # 创建颜色映射（基于Z坐标）
            colors = z.astype(float)
            
            # 创建3D散点图
            fig = go.Figure()
            
            scatter = go.Scatter3d(
                x=x, y=y, z=z,
                mode='markers',
                marker=dict(
                    size=8,
                    color=colors,
                    colorscale=colorscale,
                    opacity=opacity,
                    showscale=True,
                    colorbar=dict(title="Z坐标")
                ),
                name=f'{voxel_type.title()} 体素',
                hovertemplate='<b>体素坐标</b><br>' +
                             'X: %{x}<br>' +
                             'Y: %{y}<br>' +
                             'Z: %{z}<extra></extra>'
            )
            fig.add_trace(scatter)
            
            # 设置布局
            fig.update_layout(
                title=f'体素模型: {model_id} ({voxel_type}){title_suffix}',
                scene=dict(
                    xaxis_title='X轴',
                    yaxis_title='Y轴', 
                    zaxis_title='Z轴',
                    camera=dict(eye=dict(x=1.5, y=1.5, z=1.5)),
                    aspectmode='cube',
                    xaxis=dict(range=[0, 32]),
                    yaxis=dict(range=[0, 32]),
                    zaxis=dict(range=[0, 32])
                ),
                width=800,
                height=600,
                margin=dict(l=0, r=0, t=40, b=0)
            )
            
            # 创建信息文本
            voxel_count = len(x)
            info_text = f"**模型ID:** {model_id}\n"
            info_text += f"**体素类型:** {voxel_type.title()}\n"
            info_text += f"**分辨率:** 32×32×32\n"
            info_text += f"**占用体素数:** {voxel_count}\n"
            info_text += f"**占用率:** {voxel_count / (32**3) * 100:.2f}%\n"
            info_text += f"**数据增强:** {'启用' if use_augmentation else '关闭'}"
        
        return fig, info_text
    
    def get_random_model_idx(self):
        """获取随机模型索引"""
        if self.get_model_count() > 0:
            return random.randint(0, self.get_model_count() - 1)
        return 0


def create_gradio_interface():
    """创建Gradio界面"""
    
    # 初始化查看器
    # NOTE: 请确保数据集路径正确    
    dataset_path = "./data/ShapeNet-toydata"

    viewer = ShapeNetAugmentedVoxelViewer(dataset_path)
    
    if viewer.get_model_count() == 0:
        print("未找到任何体素模型文件！请检查数据集路径。")
        return None
    
    # 定义界面函数
    def visualize_voxels(model_idx, voxel_type, use_augmentation, opacity, colorscale, show_comparison):
        if model_idx >= viewer.get_model_count():
            return None, "模型索引超出范围"
        
        try:
            fig, info = viewer.create_voxel_plot(
                model_idx, voxel_type, use_augmentation, 
                opacity, colorscale, show_comparison
            )
            return fig, info
        except Exception as e:
            return None, f"可视化错误: {str(e)}"
    
    def load_random_model():
        return viewer.get_random_model_idx()
    
    # 创建Gradio界面
    with gr.Blocks(title="ShapeNet 增强体素模型浏览器", theme=gr.themes.Soft()) as demo:
        gr.Markdown("""
        # 🧊 ShapeNet 增强体素模型浏览器
        
        这是一个交互式体素模型查看工具，集成了数据增强功能，用于浏览ShapeNetCore飞机数据集的体素表示。
        
        ## 功能特点：
        - 📊 交互式3D体素可视化（支持旋转、缩放、平移）
        - 🔄 数据增强（平移、旋转、翻转等）
        - 🧊 支持Solid（实心）和Surface（表面）两种体素类型
        - 📋 详细的体素统计信息
        - 🎲 随机模型浏览
        - 📈 原始与增强数据对比
        
        ## 使用说明：
        1. 选择模型索引和体素类型
        2. 选择是否启用数据增强
        3. 调整可视化选项
        4. 在3D图中拖拽鼠标旋转视角，滚轮缩放，右键平移
        
        ## 数据增强说明：
        - **启用增强**: 显示经过随机平移、旋转、翻转等处理的体素数据
        - **对比模式**: 并排显示原始数据和增强数据的对比
        """)
        
        with gr.Row():
            with gr.Column(scale=1):
                gr.Markdown("### 🎮 控制面板")
                
                model_slider = gr.Slider(
                    minimum=0,
                    maximum=max(0, viewer.get_model_count() - 1),
                    step=1,
                    value=0,
                    label="模型索引",
                    info=f"选择要查看的模型 (0-{viewer.get_model_count()-1})"
                )
                
                random_btn = gr.Button("🎲 随机选择模型", variant="secondary")
                
                with gr.Group():
                    gr.Markdown("#### 体素选项")
                    voxel_type_radio = gr.Radio(
                        choices=['solid', 'surface'],
                        value='surface',
                        label="体素类型",
                        info="选择要显示的体素类型"
                    )
                    
                    use_augmentation_checkbox = gr.Checkbox(
                        label="启用数据增强",
                        value=False,
                        info="显示经过数据增强处理的体素数据"
                    )
                    
                    show_comparison_checkbox = gr.Checkbox(
                        label="显示对比（原始 vs 增强）",
                        value=False,
                        info="并排显示原始数据和增强数据"
                    )
                
                with gr.Group():
                    gr.Markdown("#### 可视化选项")
                    opacity_slider = gr.Slider(
                        minimum=0.1,
                        maximum=1.0,
                        step=0.1,
                        value=0.8,
                        label="透明度",
                        info="体素的透明度"
                    )
                    
                    colorscale_dropdown = gr.Dropdown(
                        choices=['Viridis', 'Plasma', 'Inferno', 'Magma', 'Rainbow', 'Turbo', 'Spectral', 'Blues', 'Reds'],
                        value='Viridis',
                        label="颜色方案",
                        info="选择体素的颜色映射"
                    )
                
                visualize_btn = gr.Button("🚀 可视化", variant="primary", size="lg")
                
                gr.Markdown(f"""
                ### 📊 数据集信息
                - **总模型数量**: {viewer.get_model_count()}
                - **数据格式**: 32×32×32 体素
                - **体素类型**: Solid + Surface
                - **数据增强**: 支持平移、旋转、翻转
                - **可视化**: 3D交互式显示
                """)
            
            with gr.Column(scale=2):
                plot_output = gr.Plot(label="3D体素模型可视化")
                info_output = gr.Markdown("选择一个模型开始可视化...")
        
        # 事件绑定
        random_btn.click(
            fn=load_random_model,
            outputs=model_slider
        )
        
        visualize_btn.click(
            fn=visualize_voxels,
            inputs=[model_slider, voxel_type_radio, use_augmentation_checkbox, 
                   opacity_slider, colorscale_dropdown, show_comparison_checkbox],
            outputs=[plot_output, info_output]
        )
        
        # 自动加载第一个模型
        demo.load(
            fn=visualize_voxels,
            inputs=[model_slider, voxel_type_radio, use_augmentation_checkbox, 
                   opacity_slider, colorscale_dropdown, show_comparison_checkbox],
            outputs=[plot_output, info_output]
        )
    
    return demo


if __name__ == "__main__":
    # 创建并启动界面
    demo = create_gradio_interface()
    
    if demo:
        print("启动ShapeNet 体素模型浏览器...")
        print("在浏览器中访问界面来浏览体素模型")
        demo.launch(
            server_name="127.0.0.1",
            server_port=7861,  # 使用不同端口避免冲突
            share=False,
            show_error=True
        )
    else:
        print("无法创建界面，请检查数据集路径和格式")
