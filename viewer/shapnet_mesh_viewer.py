# NOTE: Generated by Claude Sonnet 4

"""
ShapeNet 3D模型可视化工具

这个脚本提供了一个Gradio界面来浏览和可视化ShapeNetCore飞机模型数据集。
支持交互式3D查看，包括旋转、缩放、平移等操作。

数据集结构：
- 每个模型都有一个唯一的ID作为文件夹名
- 每个模型文件夹下包含：
  - model_normalized.obj: 3D网格模型文件（顶点和面）
  - model_normalized.mtl: 材质文件（颜色、纹理信息）
  - model_normalized.json: 模型元数据（边界框、顶点数等）
  - model_normalized.solid.binvox: 体素化的固体表示
  - model_normalized.surface.binvox: 体素化的表面表示
"""

import os
import json
import random
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
import gradio as gr
from pathlib import Path


class ShapeNetViewer:
    def __init__(self, dataset_path):
        self.dataset_path = Path(dataset_path)
        self.model_ids = self._get_model_ids()
        print(f"找到 {len(self.model_ids)} 个3D模型")
    
    def _get_model_ids(self):
        """获取所有模型ID列表"""
        shapenet_plane_path = self.dataset_path / "shapenet_plane"
        if not shapenet_plane_path.exists():
            return []
        
        model_ids = []
        for item in shapenet_plane_path.iterdir():
            if item.is_dir() and not item.name.startswith('.'):
                model_path = item / "models" / "model_normalized.obj"
                if model_path.exists():
                    model_ids.append(item.name)
        return sorted(model_ids)
    
    def load_obj_file(self, model_id):
        """加载OBJ文件并解析顶点和面"""
        obj_path = self.dataset_path / "shapenet_plane" / model_id / "models" / "model_normalized.obj"
        
        if not obj_path.exists():
            return None, None, None
        
        vertices = []
        faces = []
        
        try:
            with open(obj_path, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line.startswith('v '):  # 顶点
                        parts = line.split()
                        vertex = [float(parts[1]), float(parts[2]), float(parts[3])]
                        vertices.append(vertex)
                    elif line.startswith('f '):  # 面
                        parts = line.split()
                        # OBJ文件中面的索引从1开始，需要转换为从0开始
                        face = []
                        for part in parts[1:]:
                            # 处理可能包含纹理坐标的情况 (v/vt/vn)
                            vertex_idx = int(part.split('/')[0]) - 1
                            face.append(vertex_idx)
                        if len(face) >= 3:  # 确保面至少有3个顶点
                            faces.append(face)
            
            vertices = np.array(vertices)
            return vertices, faces, obj_path
        
        except Exception as e:
            print(f"加载OBJ文件时出错: {e}")
            return None, None, None
    
    def load_model_metadata(self, model_id):
        """加载模型元数据"""
        json_path = self.dataset_path / "shapenet_plane" / model_id / "models" / "model_normalized.json"
        
        if not json_path.exists():
            return None
        
        try:
            with open(json_path, 'r') as f:
                metadata = json.load(f)
            return metadata
        except Exception as e:
            print(f"加载元数据时出错: {e}")
            return None
    
    def create_3d_plot(self, model_id, show_wireframe=False, colorscale='Viridis'):
        """创建3D可视化图"""
        vertices, faces, obj_path = self.load_obj_file(model_id)
        metadata = self.load_model_metadata(model_id)
        
        if vertices is None or faces is None:
            # 返回空图表
            fig = go.Figure()
            fig.add_annotation(text="无法加载模型", x=0.5, y=0.5, showarrow=False)
            return fig, "模型加载失败"
        
        # 准备绘图数据
        x, y, z = vertices[:, 0], vertices[:, 1], vertices[:, 2]
        
        # 创建三角形面
        triangles = []
        for face in faces:
            if len(face) == 3:
                triangles.append(face)
            elif len(face) == 4:  # 四边形分解为两个三角形
                triangles.append([face[0], face[1], face[2]])
                triangles.append([face[0], face[2], face[3]])
            else:  # 多边形转换为扇形三角化
                for i in range(1, len(face) - 1):
                    triangles.append([face[0], face[i], face[i + 1]])
        
        triangles = np.array(triangles)
        
        # 计算每个面的中心点作为颜色映射
        face_centers = []
        for triangle in triangles:
            center = np.mean(vertices[triangle], axis=0)
            face_centers.append(center[2])  # 使用Z坐标作为颜色
        
        # 创建3D mesh
        fig = go.Figure()
        
        # 添加主要的3D网格
        mesh = go.Mesh3d(
            x=x, y=y, z=z,
            i=triangles[:, 0],
            j=triangles[:, 1], 
            k=triangles[:, 2],
            intensity=face_centers,
            colorscale=colorscale,
            showscale=True,
            name='3D Model',
            hovertemplate='<b>顶点坐标</b><br>' +
                         'X: %{x:.3f}<br>' +
                         'Y: %{y:.3f}<br>' +
                         'Z: %{z:.3f}<extra></extra>'
        )
        fig.add_trace(mesh)
        
        # 可选：添加线框
        if show_wireframe:
            # 提取边缘
            edges = set()
            for triangle in triangles:
                for i in range(3):
                    edge = tuple(sorted([triangle[i], triangle[(i + 1) % 3]]))
                    edges.add(edge)
            
            edge_x, edge_y, edge_z = [], [], []
            for edge in edges:
                edge_x.extend([x[edge[0]], x[edge[1]], None])
                edge_y.extend([y[edge[0]], y[edge[1]], None])
                edge_z.extend([z[edge[0]], z[edge[1]], None])
            
            wireframe = go.Scatter3d(
                x=edge_x, y=edge_y, z=edge_z,
                mode='lines',
                line=dict(color='black', width=1),
                name='线框',
                hoverinfo='skip'
            )
            fig.add_trace(wireframe)
        
        # 设置布局
        fig.update_layout(
            title=f'3D模型: {model_id}',
            scene=dict(
                xaxis_title='X轴',
                yaxis_title='Y轴', 
                zaxis_title='Z轴',
                camera=dict(
                    eye=dict(x=1.5, y=1.5, z=1.5)
                ),
                aspectmode='data'  # 保持真实比例
            ),
            width=800,
            height=600,
            margin=dict(l=0, r=0, t=40, b=0)
        )
        
        # 创建信息文本
        info_text = f"**模型ID:** {model_id}\n"
        info_text += f"**顶点数量:** {len(vertices)}\n"
        info_text += f"**面数量:** {len(triangles)}\n"
        
        if metadata:
            info_text += f"**边界框最小值:** {metadata.get('min', 'N/A')}\n"
            info_text += f"**边界框最大值:** {metadata.get('max', 'N/A')}\n"
            info_text += f"**中心点:** {metadata.get('centroid', 'N/A')}\n"
        
        info_text += f"\n**文件路径:** {obj_path}"
        
        return fig, info_text
    
    def get_random_model(self):
        """获取随机模型ID"""
        if self.model_ids:
            return random.choice(self.model_ids)
        return ""
    
    def get_model_list(self):
        """获取模型列表用于下拉选择"""
        return self.model_ids


def create_gradio_interface():
    """创建Gradio界面"""
    
    # 初始化查看器
    dataset_path = "/Users/wangqiqi/Desktop/PRSNet-Reimplementation/data/ShapeNet-toydata"
    viewer = ShapeNetViewer(dataset_path)
    
    if not viewer.model_ids:
        print("未找到任何3D模型文件！请检查数据集路径。")
        return None
    
    # 定义界面函数
    def visualize_model(model_id, show_wireframe, colorscale):
        if not model_id:
            return None, "请选择一个模型"
        
        try:
            fig, info = viewer.create_3d_plot(model_id, show_wireframe, colorscale)
            return fig, info
        except Exception as e:
            return None, f"可视化错误: {str(e)}"
    
    def load_random_model():
        return viewer.get_random_model()
    
    # 创建Gradio界面
    with gr.Blocks(title="ShapeNet 3D模型浏览器", theme=gr.themes.Soft()) as demo:
        gr.Markdown("""
        # 🛩️ ShapeNet 3D模型浏览器
        
        这是一个交互式3D模型查看工具，用于浏览ShapeNetCore飞机数据集。
        
        ## 功能特点：
        - 📊 交互式3D可视化（支持旋转、缩放、平移）
        - 🎨 多种颜色方案
        - 🔧 可选线框显示
        - 📋 模型详细信息展示
        - 🎲 随机模型浏览
        
        ## 使用说明：
        1. 从下拉菜单选择模型ID，或点击"随机选择"
        2. 调整可视化选项
        3. 在3D图中拖拽鼠标旋转视角，滚轮缩放，右键平移
        """)
        
        with gr.Row():
            with gr.Column(scale=1):
                gr.Markdown("### 🎮 控制面板")
                
                model_dropdown = gr.Dropdown(
                    choices=viewer.get_model_list(),
                    label="选择模型ID",
                    value=viewer.get_random_model(),
                    info="从下拉列表中选择要查看的3D模型"
                )
                
                random_btn = gr.Button("🎲 随机选择模型", variant="secondary")
                
                with gr.Group():
                    gr.Markdown("#### 可视化选项")
                    wireframe_checkbox = gr.Checkbox(
                        label="显示线框",
                        value=False,
                        info="叠加显示模型的线框结构"
                    )
                    
                    colorscale_dropdown = gr.Dropdown(
                        choices=['Viridis', 'Plasma', 'Inferno', 'Magma', 'Rainbow', 'Turbo', 'Spectral'],
                        value='Viridis',
                        label="颜色方案",
                        info="选择3D模型的颜色映射"
                    )
                
                visualize_btn = gr.Button("🚀 可视化", variant="primary", size="lg")
                
                gr.Markdown(f"""
                ### 📊 数据集信息
                - **总模型数量**: {len(viewer.model_ids)}
                - **数据格式**: OBJ网格 + JSON元数据
                - **模型类型**: 已归一化的飞机模型
                """)
            
            with gr.Column(scale=2):
                plot_output = gr.Plot(label="3D模型可视化")
                info_output = gr.Markdown("选择一个模型开始可视化...")
        
        # 事件绑定
        random_btn.click(
            fn=load_random_model,
            outputs=model_dropdown
        )
        
        visualize_btn.click(
            fn=visualize_model,
            inputs=[model_dropdown, wireframe_checkbox, colorscale_dropdown],
            outputs=[plot_output, info_output]
        )
        
        # 自动加载第一个模型
        demo.load(
            fn=visualize_model,
            inputs=[model_dropdown, wireframe_checkbox, colorscale_dropdown],
            outputs=[plot_output, info_output]
        )
    
    return demo


if __name__ == "__main__":
    # 创建并启动界面
    demo = create_gradio_interface()
    
    if demo:
        print("启动ShapeNet 3D模型浏览器...")
        print("在浏览器中访问界面来浏览3D模型")
        demo.launch(
            server_name="127.0.0.1",
            server_port=7860,
            share=False,  # 设置为True可以创建公共链接
            show_error=True
        )
    else:
        print("无法创建界面，请检查数据集路径和格式")
